<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MacOS on Kindem的博客</title><link>https://flyandnotdown.github.io/tags/macos/</link><description>Recent content in MacOS on Kindem的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 03 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://flyandnotdown.github.io/tags/macos/index.xml" rel="self" type="application/rss+xml"/><item><title>MacOS 编译 RenderDoc</title><link>https://flyandnotdown.github.io/post/36/</link><pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate><guid>https://flyandnotdown.github.io/post/36/</guid><description>安装依赖 需要安装的依赖如下：
autoconf automake Qt5 其中 Qt5 是 RenderDoc 的界面库，autoconf 和 automake 在构建 c 胶水层生成工具 swig 会使用到。
我们可以直接使用 brew 依次安装所有依赖：
brew install autoconf brew install automake brew install qt5 完成安装后，还需要配置一下 Qt5 的 bin 目录到 PATH 中：
export PATH=&amp;#34;/usr/local/opt/qt@5/bin:$PATH&amp;#34; 编译 RenderDoc 首先下载源码，可以直接去 github 下载最新的 release 版本：GitHub - RenderDoc：
RenderDoc - Downloads 下载完成后解压：
tar -xvf renderdoc-1.13.tar.gz 完成后进入 RenderDoc 源码目录使用 CMake 开始构建：
cd renderdoc-1.13 mkdir build cd build cmake .. cmake --build . -j 16 建议构建时开启 VPN，因为会去墙外下载他们修改过的 swig 源码并当场构建，网络不好可能会构建失败。</description></item><item><title>MacOS 搭建 OpenGL 开发环境</title><link>https://flyandnotdown.github.io/post/26/</link><pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate><guid>https://flyandnotdown.github.io/post/26/</guid><description>准备工作 首先确认自己的 MacOS 上已经安装了 gcc：
gcc --version 可以看到版本号：
kindem@JohndeMacBook-Pro ~ % gcc --version Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/Applic ations/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++ /4.2.1 Apple clang version 11.0.3 (clang-1103.0.32.59) Target: x86_64-apple-darwin19.3.0 Thread model: posix InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin kindem@JohndeMacBook-Pro ~ % 如果没有安装的话会上面的指令会自动触发 XCode 下载并安装，根据提示安装完成之后再使用上面的指令检查一遍即可。
接着安装 CLion，个人是极其推荐使用 JetBrain 家的 IDE 进行开发的，可以在如下网站下载：CLion - JetBrain，下载完成后自行完成安装与激活即可。
安装完 CLion 之后，可以在 Settings 中检查 Toolchain 是否正确识别，如下：
Toolchain 通常来说只需要安装好 gcc 即可，因为 cmake 会在 CLion 中自带，而 make 会在 MacOS 系统中提供。
下载依赖库 通常来说，搭建 OpenGL 的开发环境需要两剑客：
GLFW: 提供跨平台的 OpenGL 上下文初始化与窗口创建等功能 GLAD: 提供跨平台的 OpenGL 函数指针加载等功能 我们按照顺序分别下载这些库，首先是 GLFW，地址在这：Download - GLFW，GLFW 在不同的平台上都有预编译好的包，我们根据我们的系统下载 MacOS 版本的预编译包：</description></item><item><title>MacOS Homebrew 安装、更新慢解决方法</title><link>https://flyandnotdown.github.io/post/23/</link><pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate><guid>https://flyandnotdown.github.io/post/23/</guid><description>🍖 安装 如果使用 Homebrew 官方的安装脚本进行安装，会发现安装十分缓慢，我们可以更换安装脚本中设置的仓库路径来加速安装过程。
首先先将官方的脚本下载下来，命名为 install：
curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install &amp;gt;&amp;gt; install 使用 vim 或者其他文本编辑器打开 install 脚本，修改：
BREW_REPO 一行为：
BREW_REPO = &amp;#34;https://mirrors.ustc.edu.cn/brew.git&amp;#34;.freeze 保存后重新使用 ruby 运行脚本：
ruby ./install 脚本会飞速安装，然后停顿在 homebrew-core 的下载过程，此时使用 ^C 快捷键强制结束进程，将 homebrew-core 手动下载到 homebrew 安装目录：
git clone git://mirrors.ustc.edu.cn/homebrew-core.git/ /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core --depth=1 🧀 换源 完成上面的步骤之后，使用如下命令完成换源：
# change brew source cd $(brew --repo) git remote set-url origin https://mirrors.ustc.edu.cn/brew.git # change brew-core source cd &amp;#34;$(brew --repo)/Library/Taps/homebrew/homebrew-core&amp;#34; git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git 完成换源之后，再执行更新指令一次：
brew update 看看是不是比以前快了许多呢？</description></item><item><title>MacOS 环境变量重启失效问题解决</title><link>https://flyandnotdown.github.io/post/22/</link><pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate><guid>https://flyandnotdown.github.io/post/22/</guid><description>🍥 问题简述 之前用 Linux 习惯于将环境变量统一配置在 ~/.bash_profile 中，最近工作流切换到 MacOS 上，发现之前的法子不管用了，每次重启之后之前配置的环境变量就会失效。
网上的说法是用了 zsh 才会出现这种情况，但是我自己并没有配置 zsh。
经过一番周折发现 MacOS 在 10.15 版本以上默认终端就切换到了 zsh，所以就算没有配，也会被坑 &amp;hellip;
🍖 解决办法 先使用这条指令查看自己到底是什么终端：
ps -p $$ 比如我自己的：
kindem@JohndeMBP platform-tools % ps -p $$ PID TTY TIME CMD 1274 ttys000 0:00.04 zsh 可以很明显的看到这里写的是 zsh，所以需要将 ~/.bash_profile 中配置的内容移动到 ~/.zshrc，或者将：
source ~/.bash_profile 写入 ~/.zshrc 即可。</description></item></channel></rss>