<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Toy on Kindem的博客</title><link>https://flyandnotdown.github.io/tags/toy/</link><description>Recent content in Toy on Kindem的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 04 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://flyandnotdown.github.io/tags/toy/index.xml" rel="self" type="application/rss+xml"/><item><title>GitHub Avatar Generator 重构计划</title><link>https://flyandnotdown.github.io/post/43/</link><pubDate>Sun, 04 Jul 2021 00:00:00 +0000</pubDate><guid>https://flyandnotdown.github.io/post/43/</guid><description>每一个程序员都应该有机会重写三年前写下的代码 —— 鲁迅
起因 GitHub 风格头像生成器 是我三年前写下的一个 Java 小程序，它的功能很简单，就是生成 GitHub 风格的头像。下午逛 GitHub 的时候突然看到之前写的辣鸡代码，工程管理和使用的库也相当混乱。
离谱的事情是居然还有 30 来个小星星，一时间感觉受之有愧，决定花一个下午推倒重写 &amp;hellip;&amp;hellip;
分析 首先是工程管理上的，老的工程是直接基于 IDEA 的默认 Java 工程搭建的，构建运行都相当依赖 IDEA，如果要命令行编译运行对不了解这块的网友来说还有有点麻烦的。我的想法是使用 Gradle 来进行工程管理，这样无论是命令行还是 IDE，构建和运行都相当方便。
其次，使用的库非常离谱，三年前的我引入了 OpenCV 做图片读写，我现在也没法揣摩三年前的我出于何考虑，果断放弃，直接使用 Java 自带的 ImageIO 和 BufferedImage 替代。
另外，原来的代码是写死输出文件的，也不支持自定义随机种子的配置。我决定在这次重构中添加这些功能。
细节 命令行参数解析 命令行参数解析我直接使用的 Apache 的轮子 commons-cli，主程序就稍微写一丢丢代码就能完成解析：
public class Main { public static void main(String[] args) { Options options = new Options(); options.addOption(Option.builder(&amp;#34;o&amp;#34;).longOpt(&amp;#34;output&amp;#34;).hasArg().required().type(String.class).desc(&amp;#34;output file&amp;#34;).build()); options.addOption(Option.builder(&amp;#34;s&amp;#34;).longOpt(&amp;#34;seed&amp;#34;).hasArg().required().type(String.class).desc(&amp;#34;seed string&amp;#34;).build()); CommandLineParser commandLineParser = new DefaultParser(); CommandLine commandLine = null; try { commandLine = commandLineParser.</description></item></channel></rss>