<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Languages on Kindem的博客</title><link>https://www.kindem.xyz/tags/languages/</link><description>Recent content in Languages on Kindem的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 09 Jun 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://www.kindem.xyz/tags/languages/index.xml" rel="self" type="application/rss+xml"/><item><title>JavaScript 中的模板字符串</title><link>https://www.kindem.xyz/post/12/</link><pubDate>Sat, 09 Jun 2018 00:00:00 +0000</pubDate><guid>https://www.kindem.xyz/post/12/</guid><description>模板字符串是可以使用内嵌表达式的字符串，不少高级语言中都有这一特性，如 Python、Kotlin，JavaScript 也在 ES5 规范中加入了这一特性。
☕ 语法 `text` `lin1 lin2` `text ${expr}` tag `text ${expr}` 🧀 详解 JavaScript 中的模板字符串使用反引号来包裹字符串内容而不是单引号或双引号。
转义 因为模板字符串使用反引号来包裹字符串内容，所以在模板字符串内部使用反引号时需要转义，如下：
`\`` === &amp;#39;`&amp;#39; // true 多行字符串 如果使用模板字符串，任何被包裹在两个反引号之间的字符都会被认为是有效的字符串内容，包括换行字符。所以。
`line1 line2` //等价于 &amp;#39;line1\n&amp;#39; + &amp;#39;line2&amp;#39; 内嵌表达式 使用模板字符串的最大优势在于不必再使用繁琐的字符串连接操作来连接普通字符串与表达式，而是可以直接在字符串内部写表达式。
let a = 10; let b = 20; // &amp;#39;10 + 20 = 30&amp;#39; console.log(`${a} + ${b} = ${a + b}`); 带标签的模板字符串 更高级的形式的模板字符串是带标签的模板字符串。标签使您可以用函数解析模板字符串。标签函数的第一个参数包含一个字符串值的数组。其余的参数与表达式相关。最后，你的函数可以返回处理好的的字符串（或者它可以返回完全不同的东西 , 如下个例子所述）。用于该标签的函数的名称可以被命名为任何名字。
var person = &amp;#39;Mike&amp;#39;; var age = 28; function myTag(strings, personExp, ageExp) { var str0 = strings[0]; // &amp;#34;that &amp;#34; var str1 = strings[1]; // &amp;#34; is a &amp;#34; // There is technically a string after // the final expression (in our example), // but it is empty (&amp;#34;&amp;#34;), so disregard.</description></item></channel></rss>