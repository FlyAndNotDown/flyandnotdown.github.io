<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on Kindem的博客</title><link>https://www.kindem.xyz/tags/git/</link><description>Recent content in git on Kindem的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 27 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.kindem.xyz/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Conventional Commits 介绍</title><link>https://www.kindem.xyz/post/41/</link><pubDate>Sun, 27 Jun 2021 00:00:00 +0000</pubDate><guid>https://www.kindem.xyz/post/41/</guid><description>介绍 Conventional Commits Conventional Commits (下称 CC) 是一套 git commit message 的规范，旨在让 commit message 能同时被人类和机器所接纳，也就是说满足可读性的同时增强规范性，它的官网在这里: Conventional Commits。
目前来看 CC 标准已经被越来越多的人所接受，很多开源项目也积极采纳并推广这套标准（比如 Ant-Design、NaiveUI）。
实话说我之前经常看到过这种 commit message 的写法，但是我还真不知道这种写法有一套专门的标准，偶然间逛 GitHub 发现了这个，决定好好学习一下，这样能帮助自己更好地融入开源社区。
规范详解 CC 规范最重要的莫过于 git commit message 的格式：
&amp;lt;type&amp;gt;[optional scope]: &amp;lt;description&amp;gt; [optional body] [optional footer(s)] 按照这种写法的优点在于 git 历史记录会相当规范，这很适合一些自动化工具去解析、生成这些提交信息，同时又不失可读性。
其中 type 字段用于传达本笔提交大致的内容：
fix 表示提交用于修复 bug feat 表示提交用于添加新功能 build 表示提交修改了构建系统或者外部依赖 ci 表示提交修改了持续构建、持续部署配置或脚本 docs 表示提交修改了文档 perf 表示提交进行了性能优化 refactor 表示提交进行了重构 style 表示提交修改了代码格式问题 test 表示提交添加或修改了测试用例 BREAKING CHANGE 表示提交进行了不兼容修改，需要在脚注中使用 type 字段后面还可以跟上 scope 以表示更精确的行为，如 feat(parser): add ability to parse arrays。</description></item></channel></rss>